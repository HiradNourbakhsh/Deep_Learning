# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s8G9jumn7F_a_wppXGnc3_XNd7T33SiT

# RNNs
Task:
1. Download and explore data
2. Preproceess data if needed
3. Create a dataset with group of inputs of size X = (10-50) - Randomly sample points, and take the next X points
3.a. Either randomly sample different points to get xs and ys
3.b Or Take evert possible datapoint from 0 to size of dataset - x. and shuffle the dataset
4. Make it into a tensorflow dataset, Split the data into train and test
5. Time distributed predictions with size 5-10
6. Use 3 different model architectures (RNN type / wavenet)
7. Prints the different graphs
"""

#!wget https://storage.googleapis.com/nicksdemobucket/sunspots.csv

# OR

!wget https://storage.googleapis.com/nicksdemobucket/temperatures.csv

# OR MNIST



"""# Importing Dataset"""

import pandas as pd
import numpy as np

df = pd.read_csv('temperatures.csv')

df.plot()

df

type(df.Date[0])

from pandas.tseries.offsets import MonthEnd

df['Date'] = pd.to_datetime(df['Date'])
df = df.set_index('Date')
df.head()

df.index

df.shape

df.plot()

split_date = pd.Timestamp('1985-01-01')

split_date

train = df.loc[:split_date, ['Temp']]
test = df.loc[split_date:, ['Temp']]

print(train.shape)

print(test.shape)

"""# Preprocessing"""

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler()

train_sc = sc.fit_transform(train)
test_sc = sc.fit_transform(test)

train_sc[:10]

train_sc.shape

test_sc.shape

X_train = train_sc[:-1]
y_train = train_sc[1:]

X_test = test_sc[:-1]
y_test = test_sc[1:]

X_train.shape, y_train.shape

X_test.shape, y_test.shape

X_train[:5]

y_train[:5]

"""# Convert to Tensorflow Dataset"""

import tensorflow as tf
from tensorflow import keras

ds = tf.data.Dataset.from_tensor_slices(dict(df))

ds

"""# Training Simple RNN"""

model = keras.models.Sequential([
                                 keras.layers.SimpleRNN(1, input_shape = [None, 1])
])

optimizer = keras.optimizers.Adam(learning_rate = 0.005)
model.compile(loss = 'mse', optimizer = optimizer)
history = model.fit(X_train, y_train, epochs = 15, verbose = 1)

model.evaluate(X_test, y_test)

model.evaluate(X_train, y_train)

model.summary()

import matplotlib.pyplot as plt
plt.plot(history.history['loss'], 'o-')

y_pred = model.predict(X_test)

def plot_series(x, y, color='r'):
  plt.plot(x.reshape(-1), 'o-')
  plt.scatter(51, y, c=color)
  plt.grid(True)

y_pred = model.predict(X_test)
plot_series(X_train[0], y_test[0], color='g')
plot_series(X_train[0], y_pred[0], color='r')
plt.show()



"""# Deep RNN"""

model_rec_deep = keras.models.Sequential([
                                          keras.layers.SimpleRNN(20, return_sequences = True, input_shape = [None, 1]),
                                          keras.layers.SimpleRNN(20),
                                          keras.layers.Dense(1)
])

model_rec_deep.compile(loss = 'mse', optimizer = 'adam')

history = model_rec_deep.fit(X_train, y_train, epochs = 10, verbose = 1)

model_rec_deep.evaluate(X_train, y_train)

plt.plot(history.history['loss'], 'o-')

y_pred = model_rec_deep.predict(X_test)
plot_series(X_train[0], y_test[0], color='g')
plot_series(X_train[0], y_pred[0], color='r')
plt.show()



"""#LSTM"""

def last_time_step_mse(Y_true, Y_pred):
    return keras.metrics.mean_squared_error(y_test[:, -1], y_pred[:, -1])

model = keras.models.Sequential([
    keras.layers.LSTM(20, return_sequences=True, input_shape=[None, 1]),
    keras.layers.LSTM(20, return_sequences=True),
    keras.layers.TimeDistributed(keras.layers.Dense(10))
])

model.compile(loss="mse", optimizer="adam", metrics=[last_time_step_mse])
history = model.fit(X_train, y_train, epochs=10)

model.evaluate(X_test, y_test)

plt.plot(history.history['loss'], 'o-')

X_train[0:]

y_pred = model.predict(X_test)
plot_series(X_train[0], y_test[0], color='g')
plot_series(X_train[0], y_pred[0][0][0], color='r')
plt.show()



