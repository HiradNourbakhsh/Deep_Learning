# -*- coding: utf-8 -*-
"""Tensor_Data_API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LDdUIVq8IItBAROxGMd_d4Vf7vj1nhqt

Task:
Take the MNIST dataset in the keras.datasets API

Put the data into a TFrecord format in multiple files. Then train a keras model that uses tf's Data API to preprocess the data concurrently as the model is being trained.

Print a graph of the loss.
"""

import tensorflow as tf
from tensorflow import keras
import os
import numpy as np

import tensorflow_datasets as tfds
AUTOTUNE = tf.data.experimental.AUTOTUNE

ds = tfds.load('mnist', shuffle_files=True, as_supervised=True)

ds['test'].cardinality()

ds_splits = ["train", "test"]

def _bytes_feature(value):
    if isinstance(value, type(tf.constant(0))):
        value = value.numpy()
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

def _float_feature(value):
  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))

def _int64_feature(value):
  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))

def serialize_array(array):
  array = tf.io.serialize_tensor(array)
  return array

for d in ds_splits:
  print("saving {}".format(d))
  subset = ds[d]

  filename = d+".tfrecords"
  writer = tf.io.TFRecordWriter(filename)
  count = 0
  for image, label in subset:
    data={
        'height': _int64_feature(28),
        'width': _int64_feature(28),
        'depth': _int64_feature(1),
        'label': _int64_feature(label),
        'image_raw':_bytes_feature(serialize_array(image))
        }

    out = tf.train.Example(features=tf.train.Features(feature=data))
    writer.write(out.SerializeToString())
    count +=1
  writer.close()
  print(count)

def parse_tfr_elem(element):
  parse_dict = {
      'height': tf.io.FixedLenFeature([], tf.int64),
      'width':tf.io.FixedLenFeature([], tf.int64),
      'label':tf.io.FixedLenFeature([], tf.int64),
      'depth':tf.io.FixedLenFeature([], tf.int64),
      'image_raw' : tf.io.FixedLenFeature([], tf.string)
  }
  example_message = tf.io.parse_single_example(element, parse_dict)

  img_raw = example_message['image_raw']
  height = example_message['height']
  width = example_message['width']
  depth = example_message['depth']
  label = example_message['label']
  
  feature = tf.io.parse_tensor(img_raw, out_type=tf.uint8)
  feature = tf.reshape(feature, shape=[height,width,depth])
  return (feature, label)

def get_dataset(filename, set_type):
    ignore_order = tf.data.Options()
    ignore_order.experimental_deterministic = False
    dataset = tf.data.TFRecordDataset(filename)
    
    dataset = dataset.with_options(
        ignore_order
    )  

    dataset = dataset.map(
        parse_tfr_elem, num_parallel_calls=AUTOTUNE
    )

    dataset = dataset.shuffle(2048, reshuffle_each_iteration=True)
    dataset = dataset.batch(BATCH_SIZE)
    dataset = dataset.prefetch(buffer_size=AUTOTUNE)
    dataset = dataset.repeat() if set_type =='train' else dataset 
    return dataset

BATCH_SIZE = 32

tfr_dataset = get_dataset('train.tfrecords', "train")

for sample in tfr_dataset.take(1):
  print(sample)

def my_neural_network():
  input_ = keras.layers.Input(shape = [28,28, 1])
  flatten = keras.layers.Flatten()(input_)
  hidden1 = keras.layers.Dense(30, activation = 'relu')(flatten)
  hidden2 = keras.layers.Dense(30, activation = 'relu')(hidden1)
  hidden3 = keras.layers.Dense(30, activation = 'relu')(hidden2)
  concat = keras.layers.concatenate([flatten, hidden3])
  output = keras.layers.Dense(10, activation = 'softmax')(concat)

  model_1 = keras.models.Model(inputs = [input_], outputs = [output])
  model_1.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'sgd', metrics = ['accuracy'])
  return model_1

model = my_neural_network()

model.summary()

history = model.fit(tfr_dataset, steps_per_epoch=60000//BATCH_SIZE, epochs = 20)

import pandas as pd
import matplotlib.pyplot as plt

pd.DataFrame(history.history).plot(figsize = (8, 5))
plt.grid(True)
plt.gca().set_ylim(0, 1)
plt.show()

